{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://tilemap/./src/app.ts","webpack://tilemap/./src/camera.ts","webpack://tilemap/./src/canvas.ts","webpack://tilemap/./src/debugger.ts","webpack://tilemap/./src/editor/tile-map-exporter.ts","webpack://tilemap/./src/editor/tile-placer.ts","webpack://tilemap/./src/editor/tile-selector.ts","webpack://tilemap/./src/game-objects/blob-monster.ts","webpack://tilemap/./src/game-objects/collision.ts","webpack://tilemap/./src/game-objects/game-object.ts","webpack://tilemap/./src/game-objects/monster.ts","webpack://tilemap/./src/game-objects/player.ts","webpack://tilemap/./src/game.ts","webpack://tilemap/./src/keyboard.ts","webpack://tilemap/./src/player-ui.ts","webpack://tilemap/./src/tile-map.ts","webpack://tilemap/./src/tile.ts","webpack://tilemap/./src/utils.ts","webpack://tilemap/webpack/bootstrap","webpack://tilemap/webpack/runtime/global","webpack://tilemap/webpack/runtime/make namespace object","webpack://tilemap/webpack/runtime/publicPath","webpack://tilemap/webpack/startup"],"sourcesContent":["import css from '../styles.css';\r\nimport { Debugger } from './debugger';\r\nimport { Game } from './game';\r\n\r\n// Load styles\r\ncss;\r\n\r\n// Create game\r\nconst GAME = new Game();\r\n\r\n// Create debugger and inject Game\r\nexport const DEBUG = new Debugger(GAME);\r\n\r\n// Start the game\r\nGAME.run();\r\n","import { TileMap } from './tile-map';\r\n\r\n/**\r\n * Contains information regarding to the Camera's position and viewport\r\n */\r\nexport class Camera {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  maxX: number;\r\n  maxY: number;\r\n\r\n  constructor(\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n    tileMap: TileMap\r\n  ) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.maxX = tileMap.cols * TileMap.TSize - width;\r\n    this.maxY = tileMap.rows * TileMap.TSize - height;\r\n  }\r\n\r\n  update(dirX: number, dirY: number, speed: number) {\r\n    // Move camera\r\n    this.x += dirX * speed;\r\n    this.y += dirY * speed;\r\n    // Clamp values\r\n    this.x = Math.max(0, Math.min(this.x, this.maxX));\r\n    this.y = Math.max(0, Math.min(this.y, this.maxY));\r\n  }\r\n}\r\n","import { DEBUG } from './app';\r\n\r\nexport interface CanvasLayerOptions {\r\n  id: string;\r\n  hide: boolean;\r\n  /**\r\n   * Layer order 0 = top\r\n   */\r\n  layer: number;\r\n}\r\n\r\nexport interface CanvasLayer {\r\n  id: string;\r\n  hide: boolean;\r\n  layer: number;\r\n  render(context: CanvasRenderingContext2D, tick?: number): void;\r\n  debug(context: CanvasRenderingContext2D): void;\r\n}\r\n\r\n/**\r\n * Holds reference to the HTML canvas, context and layer abstraction\r\n */\r\nexport class Canvas {\r\n  static Width = 512;\r\n  static Height = 512;\r\n\r\n  private canvas: HTMLCanvasElement;\r\n  private context: CanvasRenderingContext2D;\r\n  private layers: Map<string, CanvasLayer> = new Map();\r\n\r\n  constructor(domId: string) {\r\n    this.canvas = document.getElementById(domId) as HTMLCanvasElement;\r\n    this.canvas.setAttribute('width', Canvas.Width + '');\r\n    this.canvas.setAttribute('height', Canvas.Height + '');\r\n    this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\r\n  }\r\n\r\n  getCanvas(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n\r\n  getContext(): CanvasRenderingContext2D {\r\n    return this.context;\r\n  }\r\n\r\n  clear() {\r\n    this.context.clearRect(0, 0, Canvas.Width, Canvas.Height);\r\n  }\r\n\r\n  getLayers(): CanvasLayer[] {\r\n    // TODO: Refactor this, not efficient to sort on every render!\r\n    return Array.from(this.layers.values()).sort((a, b) => b.layer - a.layer);\r\n  }\r\n\r\n  addLayer(layer: CanvasLayer): Canvas {\r\n    if (this.layers.has(layer.id)) {\r\n      console.warn(`Canvas layer ${layer.id} already exists`);\r\n    } else {\r\n      this.layers.set(layer.id, layer);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  removeLayer(id: string) {\r\n    this.layers.delete(id);\r\n  }\r\n\r\n  render(tick: number) {\r\n    this.getLayers().forEach((layer) => {\r\n      if (!layer.hide) {\r\n        layer.render(this.context, tick);\r\n        if (DEBUG.enabled) {\r\n          layer.debug(this.context);\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { CanvasLayer } from './canvas';\r\nimport { TileMapExporter } from './editor/tile-map-exporter';\r\nimport { TilePlacer } from './editor/tile-placer';\r\nimport { TileSelector } from './editor/tile-selector';\r\nimport { Game } from './game';\r\n\r\nexport class Debugger {\r\n  enabled = true;\r\n\r\n  private tileSelector: TileSelector;\r\n  private tileMapExporter: TileMapExporter;\r\n  private debugLayers: CanvasLayer[] = [];\r\n  private game: Game;\r\n\r\n  constructor(game: Game) {\r\n    this.game = game;\r\n    this.tileSelector = new TileSelector();\r\n    this.debugLayers.push(\r\n      new TilePlacer({\r\n        id: 'tile-placer',\r\n        hide: !this.enabled,\r\n        layer: 0,\r\n        tileSelector: this.tileSelector,\r\n        canvas: this.game.canvas,\r\n        tileMap: this.game.background,\r\n      })\r\n    );\r\n\r\n    this.tileMapExporter = new TileMapExporter(this.game.background);\r\n\r\n    const checkboxEl = document.getElementById(\r\n      'debug-input'\r\n    ) as HTMLInputElement;\r\n    checkboxEl.addEventListener('change', (e) => this.onChange(e));\r\n\r\n    if (this.enabled) {\r\n      checkboxEl.setAttribute('checked', this.enabled + '');\r\n    }\r\n\r\n    this.debugLayers.forEach((layer) => this.game.canvas.addLayer(layer));\r\n  }\r\n\r\n  private onChange(e: Event) {\r\n    this.enabled = (<HTMLInputElement>e.target).checked;\r\n    if (this.enabled) {\r\n      this.tileSelector.show();\r\n      this.tileMapExporter.show();\r\n    } else {\r\n      this.tileSelector.hide();\r\n      this.tileMapExporter.hide();\r\n    }\r\n  }\r\n}\r\n","import { TileMap } from '../tile-map';\r\n\r\nexport class TileMapExporter {\r\n  constructor(tileMap: TileMap) {\r\n    (\r\n      document.getElementById('tile-map-exporter-btn') as HTMLButtonElement\r\n    ).addEventListener('click', () => this.exportTileMap(tileMap));\r\n  }\r\n\r\n  show() {\r\n    (\r\n      document.getElementById('tile-map-exporter') as HTMLDivElement\r\n    ).style.display = 'block';\r\n  }\r\n\r\n  hide() {\r\n    (\r\n      document.getElementById('tile-map-exporter') as HTMLDivElement\r\n    ).style.display = 'none';\r\n  }\r\n\r\n  exportTileMap(tileMap: TileMap) {\r\n    const filename = tileMap.id + '.json';\r\n    const jsonStr = JSON.stringify(tileMap.tiles);\r\n\r\n    const element = document.createElement('a');\r\n    element.setAttribute(\r\n      'href',\r\n      'data:text/plain;charset=utf-8,' + encodeURIComponent(jsonStr)\r\n    );\r\n    element.setAttribute('download', filename);\r\n\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n\r\n    element.click();\r\n\r\n    document.body.removeChild(element);\r\n  }\r\n}\r\n","import { DEBUG } from '../app';\r\nimport { Camera } from '../camera';\r\nimport { Canvas, CanvasLayer, CanvasLayerOptions } from '../canvas';\r\nimport { Tile } from '../tile';\r\nimport { TileMap } from '../tile-map';\r\nimport { TileSelector } from './tile-selector';\r\n\r\nexport interface TilePlacerOptions extends CanvasLayerOptions {\r\n  tileSelector: TileSelector;\r\n  canvas: Canvas;\r\n  tileMap: TileMap;\r\n}\r\n\r\nexport class TilePlacer implements CanvasLayer {\r\n  id: string;\r\n  hide: boolean;\r\n  layer: number;\r\n\r\n  private tileSelector: TileSelector;\r\n  private gameCanvas: HTMLCanvasElement;\r\n  private gameTileMap: TileMap;\r\n  private debugTileMap: TileMap;\r\n  private x: number = 0;\r\n  private y: number = 0;\r\n  private prevCol: number = 0;\r\n  private prevRow: number = 0;\r\n  private camera: Camera;\r\n\r\n  constructor(options: TilePlacerOptions) {\r\n    this.id = options.id;\r\n    this.hide = options.hide;\r\n    this.layer = options.layer;\r\n    this.tileSelector = options.tileSelector;\r\n    this.gameCanvas = options.canvas.getCanvas();\r\n    this.gameTileMap = options.tileMap;\r\n    this.camera = options.tileMap.camera as Camera;\r\n    const cols = options.tileMap.cols;\r\n    const rows = options.tileMap.rows;\r\n    this.debugTileMap = new TileMap({\r\n      id: 'debug-tile-map',\r\n      hide: false,\r\n      layer: 0,\r\n      tiles: [],\r\n      cols: cols,\r\n      rows: rows,\r\n    });\r\n    this.debugTileMap.setCamera(this.camera as Camera);\r\n    this.gameCanvas.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n    this.gameCanvas.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n    this.gameCanvas.addEventListener(\r\n      'mouseleave',\r\n      this.onMouseLeave.bind(this)\r\n    );\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D) {\r\n    if (DEBUG.enabled) {\r\n      this.debugTileMap.render(context);\r\n    }\r\n  }\r\n\r\n  onMouseDown(e: MouseEvent) {\r\n    if (DEBUG.enabled && e.button === 0) {\r\n      this.setTileOnMap(e, this.gameTileMap);\r\n    }\r\n  }\r\n\r\n  onMouseMove(e: MouseEvent) {\r\n    if (DEBUG.enabled) {\r\n      const col = Math.floor(this.x / TileMap.TSize);\r\n      const row = Math.floor(this.y / TileMap.TSize);\r\n\r\n      if (this.prevCol !== col || this.prevRow !== row) {\r\n        this.debugTileMap.setTile(<Tile>{}, this.prevCol, this.prevRow);\r\n      } else {\r\n        this.setTileOnMap(e, this.debugTileMap);\r\n      }\r\n\r\n      this.prevCol = col;\r\n      this.prevRow = row;\r\n    }\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.debugTileMap.setTile(<Tile>{}, this.prevCol, this.prevRow);\r\n  }\r\n\r\n  private setTileOnMap(e: MouseEvent, tileMap: TileMap) {\r\n    const rect = this.gameCanvas.getBoundingClientRect();\r\n\r\n    this.x = Math.round(e.clientX - rect.left) + this.camera.x;\r\n    this.y = Math.round(e.clientY - rect.top) + this.camera.y;\r\n\r\n    const col = Math.floor(this.x / TileMap.TSize);\r\n    const row = Math.floor(this.y / TileMap.TSize);\r\n\r\n    const tile = this.tileSelector.getSelectedTile();\r\n\r\n    if (tile) {\r\n      tileMap.setTile(tile, col, row);\r\n    }\r\n  }\r\n\r\n  debug(): void {\r\n    // Not implemented\r\n  }\r\n}\r\n","import { Tile } from '../tile';\r\nimport tileMapPng from '../../assets/tile-map.png';\r\nimport tileMapJson from '../../assets/tile-map.json';\r\nimport { TileMap } from '../tile-map';\r\n\r\nexport class TileSelector {\r\n  private ui: HTMLDivElement;\r\n  private tiles: Tile[] = [];\r\n  private tilemapImg = new Image();\r\n  private selectedTile: Tile | undefined;\r\n\r\n  constructor() {\r\n    this.ui = document.getElementById('tile-selector') as HTMLDivElement;\r\n    this.tilemapImg.src = tileMapPng;\r\n    this.tiles = tileMapJson;\r\n    // Create tile swatches\r\n    this.tiles.forEach((tile) => {\r\n      const swatchEl = document.createElement('img');\r\n      swatchEl.src = tileMapPng;\r\n      swatchEl.width = TileMap.TSize;\r\n      swatchEl.height = TileMap.TSize;\r\n      const styles = `margin-right: 4px; border: solid 2px rgba(0,0,0,0); cursor: pointer; object-fit: cover; object-position: -${\r\n        tile.type * TileMap.TSize\r\n      }px;`;\r\n      swatchEl.style.cssText = styles;\r\n      swatchEl.setAttribute('data-tile', tile.type + '');\r\n      swatchEl.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n      this.ui.append(swatchEl);\r\n    });\r\n  }\r\n\r\n  hide() {\r\n    this.ui.style.display = 'none';\r\n  }\r\n\r\n  show() {\r\n    this.ui.style.display = 'block';\r\n  }\r\n\r\n  getSelectedTile(): Tile | undefined {\r\n    return this.selectedTile;\r\n  }\r\n\r\n  private onMouseDown(e: MouseEvent) {\r\n    this.clearSelectedStyle();\r\n    const tileType = parseInt(\r\n      (e.target as HTMLImageElement).getAttribute('data-tile') as string\r\n    );\r\n    (e.target as HTMLImageElement).style.border = '2px solid red';\r\n\r\n    this.selectedTile = this.tiles[tileType];\r\n  }\r\n\r\n  private clearSelectedStyle(): void {\r\n    this.ui.childNodes.forEach((tile) => {\r\n      (tile as HTMLImageElement).style.border = '2px solid rgba(0,0,0,0)';\r\n    });\r\n  }\r\n}\r\n","import { Camera } from '../camera';\r\nimport { TileMap } from '../tile-map';\r\nimport { Point } from '../utils';\r\nimport blobImgSrc from '../../assets/blob.png';\r\nimport { Monster } from './monster';\r\n\r\nlet nextId = 0;\r\n\r\nexport class BlobMonster extends Monster {\r\n  static BlobId = 'blob-monster-';\r\n  /**\r\n   * Create a blob monster\r\n   */\r\n  constructor(start: Point, camera: Camera, background: TileMap) {\r\n    super({\r\n      id: BlobMonster.BlobId + nextId++,\r\n      hide: false,\r\n      layer: 2,\r\n      x: start.x,\r\n      y: start.y,\r\n      width: 28,\r\n      height: 36,\r\n      srcX: 18,\r\n      srcY: 9,\r\n      camera: camera,\r\n      imgSrc: blobImgSrc,\r\n      background: background,\r\n      stats: {\r\n        speed: 1,\r\n        health: 5,\r\n        attackPower: 0.5,\r\n        attackSpeed: 20,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Camera } from '../camera';\r\nimport { Circle, Point, Rectangle, Vector } from '../utils';\r\n\r\n/**\r\n * Calculate AABB collision between two rectangles\r\n * @param a\r\n * @param b\r\n * @param camera\r\n * @returns\r\n */\r\nexport const aabbCollision = (a: Rectangle, b: Rectangle, camera?: Camera) => {\r\n  const cameraOffsetX = camera ? -camera.x : 0;\r\n  const cameraOffsetY = camera ? -camera.y : 0;\r\n  const xCollides = a.x + cameraOffsetX < b.b.x && a.b.x > b.a.x;\r\n  const yCollides = a.y + cameraOffsetY < b.c.y && a.c.y > b.y;\r\n  return xCollides && yCollides;\r\n};\r\n\r\n/**\r\n * Calculate if a point is within a rectangle\r\n * @param point\r\n * @param rect\r\n */\r\nexport const pointInRectangle = (point: Point, rect: Rectangle): boolean => {\r\n  const ab = new Vector(rect.a, rect.b);\r\n  const ap = new Vector(rect.a, point);\r\n  const bc = new Vector(rect.b, rect.c);\r\n  const bp = new Vector(rect.b, point);\r\n  return (\r\n    0 <= ab.dot(ap) &&\r\n    ab.dot(ap) <= ab.dot(ab) &&\r\n    0 <= bc.dot(bp) &&\r\n    bc.dot(bp) <= bc.dot(bc)\r\n  );\r\n};\r\n\r\n/**\r\n * Calculate if a circle is touching or within a rectangle\r\n * @param circle\r\n * @param rect\r\n * @returns\r\n */\r\nexport const circleInRectangle = (circle: Circle, rect: Rectangle): boolean => {\r\n  let testX: number = circle.x;\r\n  let testY: number = circle.y;\r\n\r\n  if (circle.x < rect.a.x) {\r\n    testX = rect.a.x;\r\n  } else if (circle.x > rect.b.x) {\r\n    testX = rect.b.x;\r\n  }\r\n  if (circle.y < rect.a.y) {\r\n    testY = rect.a.y;\r\n  } else if (circle.y > rect.c.y) {\r\n    testY = rect.c.y;\r\n  }\r\n\r\n  const distX = circle.x - testX;\r\n  const distY = circle.y - testY;\r\n\r\n  const dist = Math.sqrt(distX * distX + distY * distY);\r\n\r\n  if (dist <= circle.radius) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n","import { Camera } from '../camera';\r\nimport { Canvas, CanvasLayer, CanvasLayerOptions } from '../canvas';\r\nimport { Keyboard } from '../keyboard';\r\nimport { Tile, TileHelper } from '../tile';\r\nimport { TileMap } from '../tile-map';\r\nimport {\r\n  Rectangle,\r\n  RgbArray,\r\n  Vector,\r\n  rgbArrayOpacity,\r\n  rgbArrayToString,\r\n} from '../utils';\r\nimport { aabbCollision } from './collision';\r\n\r\nexport interface GameObjectOptions extends CanvasLayerOptions {\r\n  /**\r\n   * The x-axis coordinate in the destination canvas at which\r\n   * to place the top-left corner of the source image\r\n   */\r\n  x: number;\r\n  /**\r\n   * The y-axis coordinate in the destination canvas at which\r\n   * to place the top-left corner of the source image\r\n   */\r\n  y: number;\r\n  /**\r\n   * Width of sprite\r\n   */\r\n  width: number;\r\n  /**\r\n   * Height of sprite\r\n   */\r\n  height: number;\r\n  /**\r\n   * The x-axis coordinate of the top left corner of the sub-rectangle\r\n   * of the source image to draw into the destination context\r\n   */\r\n  srcX: number;\r\n  /**\r\n   * The y-axis coordinate of the top left corner of the sub-rectangle\r\n   * of the source image to draw into the destination context\r\n   */\r\n  srcY: number;\r\n  /**\r\n   * Current game camera object\r\n   */\r\n  camera: Camera;\r\n  /**\r\n   * Source sprite image use `.png`\r\n   */\r\n  imgSrc: any;\r\n  /**\r\n   * Used for collision detection with environment\r\n   */\r\n  background: TileMap;\r\n  /**\r\n   * Various stats\r\n   */\r\n  stats: GameObjectStats;\r\n}\r\n\r\n/**\r\n * Various properties - need to refactor to use ECS\r\n */\r\nexport interface GameObjectStats {\r\n  /**\r\n   * Speed multiplyer\r\n   */\r\n  speed: number;\r\n  /**\r\n   * Health\r\n   */\r\n  health: number;\r\n  /**\r\n   * Amount of damage this object can inflict to health\r\n   */\r\n  attackPower: number;\r\n  /**\r\n   * Frequency of damage this object can inflict to health 100s ms\r\n   */\r\n  attackSpeed: number;\r\n}\r\n\r\nexport type GameObjects = Map<string, GameObject>;\r\n\r\nexport interface GameObjectUpdateArguments {\r\n  gameObjects: GameObjects;\r\n  keyboard: Keyboard;\r\n  tick: number;\r\n}\r\n\r\nexport abstract class GameObject extends Rectangle implements CanvasLayer {\r\n  id: string;\r\n  hide: boolean;\r\n  layer: number;\r\n  srcX: number;\r\n  srcY: number;\r\n  img: HTMLImageElement;\r\n  background: TileMap;\r\n  dirX: number = 0;\r\n  dirY: number = 0;\r\n  debugColor: RgbArray = [255, 0, 0];\r\n  vector: Vector;\r\n  stats: GameObjectStats;\r\n\r\n  protected camera: Camera;\r\n\r\n  private touchingTiles: Tile[] = [];\r\n  private outOfBoundsTiles: Tile[] = [];\r\n\r\n  constructor(options: GameObjectOptions) {\r\n    super(options.x, options.y, options.width, options.height);\r\n    this.id = options.id;\r\n    this.hide = options.hide;\r\n    this.layer = options.layer;\r\n    this.srcX = options.srcX;\r\n    this.srcY = options.srcY;\r\n    this.camera = options.camera;\r\n    this.img = new Image();\r\n    this.img.src = options.imgSrc;\r\n    this.background = options.background;\r\n    this.stats = options.stats;\r\n    this.vector = new Vector(this.center, this.center);\r\n  }\r\n\r\n  abstract render(\r\n    context: CanvasRenderingContext2D,\r\n    tick?: number | undefined\r\n  ): void;\r\n  abstract update(args: GameObjectUpdateArguments): void;\r\n\r\n  /**\r\n   * Move the game object and detect collision with background tiles\r\n   */\r\n  protected move() {\r\n    // Store previous position\r\n    const prev = new Rectangle(this.x, this.y, this.width, this.height);\r\n    // Move character x\r\n    this.x += this.dirX * this.stats.speed;\r\n    // Detect collision\r\n    let collides = this.collisionDetection();\r\n    // React to collision\r\n    if (collides) {\r\n      this.x = prev.x;\r\n    }\r\n    // Move character y\r\n    this.y += this.dirY * this.stats.speed;\r\n    // Detect collision\r\n    collides = this.collisionDetection();\r\n    // React to collision\r\n    if (collides) {\r\n      this.y = prev.y;\r\n    }\r\n    // Store movement vector\r\n    this.vector = new Vector(prev.center, this.center);\r\n  }\r\n\r\n  protected clampValues() {\r\n    this.x = Math.max(\r\n      0,\r\n      Math.min(this.x, Canvas.Width - this.width + this.camera.x)\r\n    );\r\n    this.y = Math.max(\r\n      0,\r\n      Math.min(this.y, Canvas.Height - this.height + this.camera.y)\r\n    );\r\n  }\r\n\r\n  private collisionDetection(): boolean {\r\n    const startCol = Math.floor(this.x / TileMap.TSize);\r\n    const endCol = Math.ceil((this.x + this.width) / TileMap.TSize);\r\n    const startRow = Math.floor(this.y / TileMap.TSize);\r\n    const endRow = Math.ceil((this.y + this.height) / TileMap.TSize);\r\n\r\n    // Tiles character is in\r\n    this.touchingTiles = [];\r\n    // Tiles character cannot pass through\r\n    this.outOfBoundsTiles = [];\r\n\r\n    for (let c = startCol; c < endCol; c++) {\r\n      for (let r = startRow; r < endRow; r++) {\r\n        const tile = TileHelper.getTile(this.background, c, r);\r\n        this.touchingTiles.push(tile);\r\n        if (tile.outOfBounds) {\r\n          this.outOfBoundsTiles.push(tile);\r\n        }\r\n      }\r\n    }\r\n\r\n    let collides = false;\r\n\r\n    // AABB collision detection\r\n    this.outOfBoundsTiles.forEach((tile) => {\r\n      collides = aabbCollision(this, tile, this.camera);\r\n    });\r\n\r\n    return collides;\r\n  }\r\n\r\n  debug(context: CanvasRenderingContext2D) {\r\n    context.beginPath();\r\n    context.strokeStyle = rgbArrayToString(this.debugColor);\r\n    context.lineWidth = 1;\r\n    context.strokeRect(\r\n      this.x - this.camera.x,\r\n      this.y - this.camera.y,\r\n      this.width,\r\n      this.height\r\n    );\r\n    context.closePath();\r\n    if (this.touchingTiles && this.touchingTiles.length) {\r\n      context.beginPath();\r\n      context.strokeStyle = rgbArrayToString(this.debugColor);\r\n      context.lineWidth = 1;\r\n      this.touchingTiles.forEach((tile, index) => {\r\n        context.strokeRect(tile.x, tile.y, TileMap.TSize, TileMap.TSize);\r\n        context.font = '12px sans-serif';\r\n        context.fillStyle = rgbArrayToString(this.debugColor);\r\n        context.fillText(\r\n          index + '',\r\n          tile.x + TileMap.TSize / 2,\r\n          tile.y + TileMap.TSize / 2\r\n        );\r\n      });\r\n      context.closePath();\r\n    }\r\n    if (this.outOfBoundsTiles && this.outOfBoundsTiles.length) {\r\n      context.beginPath();\r\n      context.fillStyle = rgbArrayToString(\r\n        rgbArrayOpacity(this.debugColor, 0.3)\r\n      );\r\n      this.outOfBoundsTiles.forEach((tile) => {\r\n        context.fillRect(tile.x, tile.y, TileMap.TSize, TileMap.TSize);\r\n      });\r\n      context.closePath();\r\n    }\r\n  }\r\n}\r\n","import { TileMap } from '../tile-map';\r\nimport { Player } from './player';\r\nimport { Circle, degToRad, rgbArrayOpacity, rgbArrayToString } from '../utils';\r\nimport {\r\n  GameObject,\r\n  GameObjectOptions,\r\n  GameObjectUpdateArguments,\r\n} from './game-object';\r\nimport { aabbCollision, circleInRectangle } from './collision';\r\n\r\nexport abstract class Monster extends GameObject {\r\n  detectionRadius = 100;\r\n  detectionCircle!: Circle;\r\n\r\n  private characterDetected = false;\r\n\r\n  constructor(options: GameObjectOptions) {\r\n    super(options);\r\n    this.setDetectionCircle();\r\n    this.debugColor = [0, 128, 0];\r\n  }\r\n\r\n  update(args: GameObjectUpdateArguments) {\r\n    if (args.gameObjects) {\r\n      const player = args.gameObjects.get(Player.PlayerId);\r\n      if (player) {\r\n        // Move monster if player detected\r\n        this.detectPlayer(player);\r\n        // Collision detection with background tiles\r\n        this.move();\r\n        // Collision detection with other game objects\r\n        this.gameObjectsCollisionDetection(args);\r\n        // Clamp values so they don't extend grid\r\n        this.clampValues();\r\n      }\r\n    }\r\n    this.setDetectionCircle();\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D, tick: number) {\r\n    this.renderMonster(context, tick);\r\n    this.renderShadow(context);\r\n  }\r\n\r\n  private doDamage = false;\r\n\r\n  private gameObjectsCollisionDetection(args: GameObjectUpdateArguments) {\r\n    args.gameObjects.forEach((object) => {\r\n      // Skip self\r\n      if (object.id === this.id) {\r\n        return;\r\n      }\r\n      // Detect if object collides with another\r\n      const collides = aabbCollision(this, object);\r\n      if (collides) {\r\n        if (object.id === Player.PlayerId) {\r\n          // Reduce player health on collision\r\n          this.attackPlayer(object as Player, args.tick);\r\n        } else {\r\n          // Move monster by simply reversing the vector\r\n          this.x += -this.vector.x;\r\n          this.y += -this.vector.y;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private attackPlayer(player: Player, tick: number) {\r\n    const freq = tick % this.stats.attackSpeed;\r\n    if (freq === 0 && this.doDamage) {\r\n      this.doDamage = false;\r\n      player.stats.health -= this.stats.attackPower;\r\n    } else if (freq !== 0) {\r\n      this.doDamage = true;\r\n    }\r\n  }\r\n\r\n  private setDetectionCircle() {\r\n    this.detectionCircle = new Circle(this.center, this.detectionRadius);\r\n  }\r\n\r\n  private detectPlayer(player: GameObject) {\r\n    // Is player within detection radius?\r\n    this.characterDetected = circleInRectangle(this.detectionCircle, player);\r\n    this.dirX = this.dirY = 0;\r\n    if (this.characterDetected) {\r\n      if (this.x <= player.x - this.width) {\r\n        this.dirX += 1;\r\n      } else if (this.x >= player.x + player.width) {\r\n        this.dirX -= 1;\r\n      }\r\n      if (this.y <= player.y - this.height) {\r\n        this.dirY += 1;\r\n      } else if (this.y >= player.y + player.height) {\r\n        this.dirY -= 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  private renderMonster(context: CanvasRenderingContext2D, tick: number) {\r\n    const tickOffset = tick % 4;\r\n    const imgSrcXOffset = this.srcX + tickOffset * TileMap.TSize;\r\n    context.drawImage(\r\n      this.img,\r\n      imgSrcXOffset,\r\n      this.srcY,\r\n      this.width,\r\n      this.height,\r\n      this.x - this.camera.x,\r\n      this.y - this.camera.y,\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n\r\n  private renderShadow(context: CanvasRenderingContext2D) {\r\n    context.beginPath();\r\n    context.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n    context.ellipse(\r\n      this.center.x - this.camera.x,\r\n      this.y - this.camera.y + this.height - 2,\r\n      this.width / 2,\r\n      5,\r\n      0,\r\n      0,\r\n      180\r\n    );\r\n    context.fill();\r\n  }\r\n\r\n  override debug(context: CanvasRenderingContext2D): void {\r\n    super.debug(context);\r\n    context.beginPath();\r\n    context.arc(\r\n      this.center.x - this.camera.x,\r\n      this.center.y - this.camera.y,\r\n      this.detectionRadius,\r\n      degToRad(0),\r\n      degToRad(360)\r\n    );\r\n    context.stroke();\r\n    if (this.characterDetected) {\r\n      context.fillStyle = rgbArrayToString(\r\n        rgbArrayOpacity(this.debugColor, 0.2)\r\n      );\r\n      context.fill();\r\n    }\r\n    if (this.vector) {\r\n      context.beginPath();\r\n      context.moveTo(\r\n        this.center.x - this.camera.x,\r\n        this.center.y - this.camera.y\r\n      );\r\n      context.lineTo(\r\n        this.center.x - this.camera.x + this.vector.x * 50,\r\n        this.center.y - this.camera.y + this.vector.y * 50\r\n      );\r\n      context.stroke();\r\n    }\r\n  }\r\n}\r\n","import { Canvas } from '../canvas';\r\nimport { TileMap } from '../tile-map';\r\nimport { GameObject, GameObjectUpdateArguments } from './game-object';\r\nimport { Point } from '../utils';\r\nimport { Camera } from '../camera';\r\nimport playerImgSrc from '../../assets/player.png';\r\nimport playerAttackImgSrc from '../../assets/player-attack.png';\r\nimport { Key } from '../keyboard';\r\n\r\n/**\r\n * Render a player game object\r\n */\r\nexport class Player extends GameObject {\r\n  static PlayerId = 'player';\r\n  static FarEdgeDistFactor = 0.75;\r\n  static NearEdgeDistFactor = 0.25;\r\n\r\n  private isAttacking = false;\r\n  private attackImg = new Image();\r\n\r\n  constructor(start: Point, camera: Camera, background: TileMap) {\r\n    super({\r\n      id: Player.PlayerId,\r\n      hide: false,\r\n      layer: 1,\r\n      x: start.x,\r\n      y: start.y,\r\n      width: 34,\r\n      height: 46,\r\n      srcX: 1,\r\n      srcY: 1,\r\n      camera: camera,\r\n      imgSrc: playerImgSrc,\r\n      background: background,\r\n      stats: {\r\n        speed: 2,\r\n        health: 10,\r\n        attackPower: 1,\r\n        attackSpeed: 10,\r\n      },\r\n    });\r\n    this.debugColor = [255, 0, 0];\r\n    window.addEventListener('click', () => {\r\n      this.attack();\r\n    });\r\n    this.attackImg.src = playerAttackImgSrc;\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D, tick: number) {\r\n    this.renderCharacter(context, tick);\r\n    this.renderShadow(context);\r\n  }\r\n\r\n  update(args: GameObjectUpdateArguments) {\r\n    this.dirX = this.dirY = 0;\r\n    // Update direction based on keys selected\r\n    if (args.keyboard.isDown(Key.Left)) {\r\n      this.dirX = -1;\r\n    }\r\n    if (args.keyboard.isDown(Key.Right)) {\r\n      this.dirX = 1;\r\n    }\r\n    if (args.keyboard.isDown(Key.Up)) {\r\n      this.dirY = -1;\r\n    }\r\n    if (args.keyboard.isDown(Key.Down)) {\r\n      this.dirY = 1;\r\n    }\r\n    this.move();\r\n    // Update camera when character is near edge\r\n    this.updateCamera();\r\n    // Clamp values so they don't extend grid\r\n    this.clampValues();\r\n  }\r\n\r\n  private attack() {\r\n    console.log('ATTACK');\r\n    console.log(this);\r\n    this.isAttacking = true;\r\n  }\r\n\r\n  private renderCharacter(context: CanvasRenderingContext2D, tick: number) {\r\n    // TODO: re-do character sprite so that each direction is separate sprite and 64x64\r\n    if (!this.isAttacking) {\r\n      const tickOffset = tick % 4;\r\n      let imgSrcXOffset = this.srcX;\r\n      let imgSrcYOffset = this.srcY;\r\n      if (this.dirX || this.dirY) {\r\n        imgSrcYOffset *= this.height * tickOffset + tickOffset + 1;\r\n      }\r\n      if (this.dirX === 1) {\r\n        imgSrcXOffset += this.width + 1;\r\n      } else if (this.dirX === -1) {\r\n        imgSrcXOffset += this.width * 3 + 3;\r\n      } else if (this.dirY === -1) {\r\n        imgSrcXOffset += this.width * 2 + 2;\r\n      }\r\n      context.drawImage(\r\n        this.img,\r\n        imgSrcXOffset,\r\n        imgSrcYOffset,\r\n        this.width,\r\n        this.height,\r\n        this.x - this.camera.x,\r\n        this.y - this.camera.y,\r\n        this.width,\r\n        this.height\r\n      );\r\n    } else {\r\n      // Render attack animation\r\n      const tickOffset = tick % 5;\r\n      this.attackAnimationMap[tickOffset] = 1;\r\n      if (!this.attackAnimationMap.includes(0)) {\r\n        this.isAttacking = false;\r\n        this.attackAnimationMap = [0, 0, 0, 0, 0];\r\n      }\r\n      context.drawImage(\r\n        this.attackImg,\r\n        tickOffset * 64,\r\n        0,\r\n        64,\r\n        64,\r\n        this.x - this.camera.x,\r\n        this.y - this.camera.y,\r\n        64,\r\n        64\r\n      );\r\n      console.log(this.attackAnimationMap);\r\n    }\r\n  }\r\n\r\n  private attackAnimationMap = [0, 0, 0, 0, 0];\r\n\r\n  private renderShadow(context: CanvasRenderingContext2D) {\r\n    context.beginPath();\r\n    context.fillStyle = 'rgba(0, 0, 0, 0.2)';\r\n    context.ellipse(\r\n      this.x - this.camera.x + this.width / 2,\r\n      this.y - this.camera.y + this.height - 2,\r\n      this.width / 2 - 5,\r\n      5,\r\n      0,\r\n      0,\r\n      180\r\n    );\r\n    context.fill();\r\n  }\r\n\r\n  private updateCamera() {\r\n    if (\r\n      this.x + this.width >\r\n      this.camera.x + Canvas.Width * Player.FarEdgeDistFactor\r\n    ) {\r\n      this.camera.update(1, 0, this.stats.speed);\r\n    }\r\n    if (this.x - this.camera.x < Canvas.Width * Player.NearEdgeDistFactor) {\r\n      this.camera.update(-1, 0, this.stats.speed);\r\n    }\r\n    if (\r\n      this.y + this.height >\r\n      this.camera.y + Canvas.Height * Player.FarEdgeDistFactor\r\n    ) {\r\n      this.camera.update(0, 1, this.stats.speed);\r\n    }\r\n    if (this.y - this.camera.y < Canvas.Height * Player.NearEdgeDistFactor) {\r\n      this.camera.update(0, -1, this.stats.speed);\r\n    }\r\n  }\r\n}\r\n","import { Camera } from './camera';\r\nimport { Canvas } from './canvas';\r\nimport { Player } from './game-objects/player';\r\nimport { Key, Keyboard } from './keyboard';\r\nimport { TileMap } from './tile-map';\r\nimport { GameObject, GameObjects } from './game-objects/game-object';\r\nimport { BlobMonster } from './game-objects/blob-monster';\r\nimport { DEBUG } from './app';\r\nimport { PlayerUi } from './player-ui';\r\n\r\n/**\r\n * Main game class, creates game objects\r\n * starts game loop, updates and renders\r\n */\r\nexport class Game {\r\n  static TickInterval = 100;\r\n\r\n  canvas: Canvas;\r\n  background: TileMap;\r\n  keyboard: Keyboard;\r\n  gameObjects: GameObjects = new Map<string, GameObject>();\r\n  tick: number = 0;\r\n\r\n  constructor() {\r\n    this.canvas = new Canvas('game');\r\n    this.keyboard = new Keyboard([Key.Left, Key.Right, Key.Up, Key.Down]);\r\n    this.background = TileMap.createBackground(10, 10);\r\n    const camera = new Camera(\r\n      0,\r\n      0,\r\n      Canvas.Width,\r\n      Canvas.Height,\r\n      this.background\r\n    );\r\n    this.background.setCamera(camera);\r\n    this.canvas.addLayer(this.background);\r\n\r\n    // Create and add player to game objects\r\n    const player = new Player(\r\n      { x: 5 * TileMap.TSize, y: 5 * TileMap.TSize },\r\n      camera,\r\n      this.background\r\n    );\r\n    this.gameObjects.set(player.id, player);\r\n\r\n    // Create and add player ui to canvas\r\n    const playerUi = new PlayerUi(player);\r\n    this.canvas.addLayer(playerUi);\r\n\r\n    // Create and add monsters to game objects\r\n    for (let i = 0; i < 3; i++) {\r\n      const p = this.gameObjects.get(Player.PlayerId) as Player;\r\n      const x = p.x - 2 * TileMap.TSize + i * TileMap.TSize;\r\n      const y = p.y + TileMap.TSize * 3;\r\n      const blob = new BlobMonster({ x: x, y: y }, camera, this.background);\r\n      this.gameObjects.set(blob.id, blob);\r\n    }\r\n\r\n    // Add all game objects to a canvas layer\r\n    this.gameObjects.forEach((object) => this.canvas.addLayer(object));\r\n  }\r\n\r\n  run() {\r\n    this.start(0);\r\n    if (DEBUG.enabled) {\r\n      console.log(this);\r\n    }\r\n  }\r\n\r\n  private start = (time: DOMHighResTimeStamp) => {\r\n    this.tick = Math.round(time / Game.TickInterval);\r\n    window.requestAnimationFrame(this.start);\r\n    this.update();\r\n    this.render();\r\n  };\r\n\r\n  private update() {\r\n    // Update all objects\r\n    Array.from(this.gameObjects.values()).forEach((object) =>\r\n      object.update({\r\n        gameObjects: this.gameObjects,\r\n        keyboard: this.keyboard,\r\n        tick: this.tick,\r\n      })\r\n    );\r\n  }\r\n\r\n  private render() {\r\n    // Clear previous frame\r\n    this.canvas.clear();\r\n    // Rener all canvas layers\r\n    this.canvas.render(this.tick);\r\n  }\r\n}\r\n","export enum Key {\r\n  Left = 'KeyA',\r\n  Right = 'KeyD',\r\n  Up = 'KeyW',\r\n  Down = 'KeyS',\r\n}\r\n\r\ninterface KeyMap {\r\n  [Key.Left]: boolean;\r\n  [Key.Right]: boolean;\r\n  [Key.Up]: boolean;\r\n  [Key.Down]: boolean;\r\n}\r\n\r\n/**\r\n * Keyboard handler\r\n */\r\nexport class Keyboard {\r\n  private keys: KeyMap = <KeyMap>{};\r\n\r\n  constructor(keys: string[]) {\r\n    this.listenForEvents(keys);\r\n  }\r\n\r\n  listenForEvents(keys: string[]) {\r\n    window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n    window.addEventListener('keyup', this.onKeyUp.bind(this));\r\n    keys.forEach((key) => (this.keys[key as keyof KeyMap] = false));\r\n  }\r\n\r\n  onKeyDown(event: KeyboardEvent) {\r\n    const keyCode = event.code;\r\n    if (keyCode in this.keys) {\r\n      event.preventDefault();\r\n      this.keys[keyCode as keyof KeyMap] = true;\r\n    }\r\n  }\r\n\r\n  onKeyUp(event: KeyboardEvent) {\r\n    const keyCode = event.code;\r\n    if (keyCode in this.keys) {\r\n      event.preventDefault();\r\n      this.keys[keyCode as keyof KeyMap] = false;\r\n    }\r\n  }\r\n\r\n  isDown(keyCode: Key): boolean {\r\n    if (this.keys[keyCode] === undefined) {\r\n      throw new Error('Keycode ' + keyCode + ' is not being listened to');\r\n    }\r\n    return this.keys[keyCode];\r\n  }\r\n\r\n  isAnyDown(keyCode: Key[]): boolean {\r\n    for (let i = 0; i < keyCode.length; i++) {\r\n      if (this.keys[keyCode[i]]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { CanvasLayer } from './canvas';\r\nimport { Player } from './game-objects/player';\r\nimport heathImgSrc from '../assets/health.png';\r\nimport heathHalfImgSrc from '../assets/health-half.png';\r\n\r\n/**\r\n * Basic UI for player\r\n */\r\nexport class PlayerUi implements CanvasLayer {\r\n  id: string = 'player-ui';\r\n  hide: boolean = false;\r\n  layer: number = 0;\r\n\r\n  private player: Player;\r\n  private healthImg: HTMLImageElement;\r\n  private healthHalfImg: HTMLImageElement;\r\n\r\n  get playerHealth(): number {\r\n    return this.player.stats.health;\r\n  }\r\n\r\n  constructor(player: Player) {\r\n    this.player = player;\r\n    this.healthImg = new Image();\r\n    this.healthImg.src = heathImgSrc;\r\n    this.healthHalfImg = new Image();\r\n    this.healthHalfImg.src = heathHalfImgSrc;\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D): void {\r\n    const fullHearts = Math.floor(this.playerHealth);\r\n    const halfHeart = this.playerHealth % 1 > 0;\r\n    for (let i = 0; i < fullHearts; i++) {\r\n      const dx = 10 + i * 32 + i * 10;\r\n      context.drawImage(this.healthImg, 0, 0, 32, 32, dx, 10, 32, 32);\r\n      if (halfHeart) {\r\n        context.drawImage(\r\n          this.healthHalfImg,\r\n          0,\r\n          0,\r\n          32,\r\n          32,\r\n          dx + 32 + 10,\r\n          10,\r\n          32,\r\n          32\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  debug(context: CanvasRenderingContext2D): void {\r\n    context.font = '24px sans-serif';\r\n    context.fillText('Health: ' + this.player.stats.health, 10, 34 + 32);\r\n  }\r\n}\r\n","import { Camera } from './camera';\r\nimport { Tile, TileHelper, TileType } from './tile';\r\nimport tileMapBackgroundJson from '../assets/tile-map-background.json';\r\nimport tileMapPng from '../assets/tile-map.png';\r\nimport { CanvasLayer, CanvasLayerOptions } from './canvas';\r\n\r\nexport interface TileMapOptions extends CanvasLayerOptions {\r\n  tiles: Tile[];\r\n  cols: number;\r\n  rows: number;\r\n}\r\n\r\n/**\r\n * TileMap holds enum for tile types and helper to get a tile\r\n */\r\nexport class TileMap implements CanvasLayer {\r\n  static TSize = 64;\r\n\r\n  static createEmptyTiles(cols: number, rows: number): Tile[] {\r\n    const tiles: Tile[] = [];\r\n\r\n    for (let col = 0; col < cols; col++) {\r\n      for (let row = 0; row < rows; row++) {\r\n        tiles.push(<Tile>{ type: TileType.Empty });\r\n      }\r\n    }\r\n\r\n    return tiles;\r\n  }\r\n\r\n  // Move to separate file!\r\n  static BackgroundId = 'background';\r\n  static createBackground(cols: number, rows: number): TileMap {\r\n    const tiles = TileMap.createEmptyTiles(cols, rows);\r\n    tiles.splice(0, tileMapBackgroundJson.length, ...tileMapBackgroundJson);\r\n    return new TileMap({\r\n      id: TileMap.BackgroundId,\r\n      hide: false,\r\n      layer: 999,\r\n      tiles: tiles,\r\n      cols: cols,\r\n      rows: rows,\r\n    });\r\n  }\r\n\r\n  id: string;\r\n  hide: boolean;\r\n  layer: number;\r\n  tiles: Tile[];\r\n  cols: number;\r\n  rows: number;\r\n  camera?: Camera;\r\n  tileMapImage: HTMLImageElement;\r\n  startCol: number = 0;\r\n  endCol: number = 0;\r\n  startRow: number = 0;\r\n  endRow: number = 0;\r\n  offsetX: number = 0;\r\n  offsetY: number = 0;\r\n\r\n  context!: CanvasRenderingContext2D;\r\n\r\n  constructor(options: TileMapOptions) {\r\n    this.id = options.id;\r\n    this.hide = options.hide;\r\n    this.layer = options.layer;\r\n    this.tiles = options.tiles;\r\n    this.cols = options.cols;\r\n    this.rows = options.rows;\r\n    this.tileMapImage = new Image();\r\n    this.tileMapImage.src = tileMapPng;\r\n  }\r\n\r\n  setCamera(camera: Camera) {\r\n    this.camera = camera;\r\n  }\r\n\r\n  setTile(tile: Tile, col: number, row: number) {\r\n    this.tiles[row * this.cols + col] = tile;\r\n  }\r\n\r\n  render(context: CanvasRenderingContext2D) {\r\n    this.context = context;\r\n    if (this.camera) {\r\n      this.startCol = Math.floor(this.camera.x / TileMap.TSize);\r\n      this.endCol = Math.ceil(\r\n        this.startCol + this.camera.width / TileMap.TSize\r\n      );\r\n      this.startRow = Math.floor(this.camera.y / TileMap.TSize);\r\n      this.endRow = Math.ceil(\r\n        this.startRow + this.camera.height / TileMap.TSize\r\n      );\r\n      this.offsetX = -this.camera.x + this.startCol * TileMap.TSize;\r\n      this.offsetY = -this.camera.y + this.startRow * TileMap.TSize;\r\n\r\n      for (let c = this.startCol; c <= this.endCol; c++) {\r\n        for (let r = this.startRow; r <= this.endRow; r++) {\r\n          // TODO: refactor TileHelper\r\n          TileHelper.render(this, c, r);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  debug(): void {\r\n    // Not implemented\r\n  }\r\n}\r\n","import { DEBUG } from './app';\r\nimport { TileMap } from './tile-map';\r\nimport { Rectangle } from './utils';\r\n\r\nexport enum TileType {\r\n  Empty = -1,\r\n  BeachBL = 0,\r\n  BeachB = 1,\r\n  BeachBR = 2,\r\n  BeachR = 3,\r\n  BeachTR = 4,\r\n  BeachT = 5,\r\n  BeachTL = 6,\r\n  BeachL = 7,\r\n  ShoreBL = 8,\r\n  ShoreB = 9,\r\n  ShoreBR = 10,\r\n  ShoreR = 11,\r\n  ShoreTR = 12,\r\n  ShoreT = 13,\r\n  ShoreTL = 14,\r\n  ShoreL = 15,\r\n  Sea = 16,\r\n  Sand = 17,\r\n  Sand2 = 18,\r\n  GrassSandBL = 19,\r\n  GrassSandB = 20,\r\n  GrassSandBR = 21,\r\n  GrassSandR = 22,\r\n  GrassSandTR = 23,\r\n  GrassSandT = 24,\r\n  GrassSandTL = 25,\r\n  GrassSandL = 26,\r\n  GrassEmpty = 27,\r\n  GrassPlant = 28,\r\n  GrassBlades = 29,\r\n}\r\n\r\nexport interface TileOptions {\r\n  srcX: number;\r\n  srcY: number;\r\n  srcWidth: number;\r\n  srcHeight: number;\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  type: TileType;\r\n  outOfBounds: boolean;\r\n}\r\n\r\nexport class Tile extends Rectangle {\r\n  srcX: number;\r\n  srcY: number;\r\n  srcWidth: number;\r\n  srcHeight: number;\r\n  type: TileType;\r\n  outOfBounds: boolean;\r\n\r\n  constructor(options: TileOptions) {\r\n    super(options.x, options.y, options.width, options.height);\r\n    this.srcX = options.srcX;\r\n    this.srcY = options.srcY;\r\n    this.srcWidth = options.srcWidth;\r\n    this.srcHeight = options.srcHeight;\r\n    this.type = options.type;\r\n    this.outOfBounds = options.outOfBounds;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets and renders a single tile to canvas context\r\n */\r\nexport class TileHelper {\r\n  static getTile(tileMap: TileMap, col: number, row: number): Tile {\r\n    const tile = tileMap.tiles[row * tileMap.cols + col];\r\n    if (tile) {\r\n      return new Tile({\r\n        srcX: tile.type * TileMap.TSize,\r\n        srcY: 0,\r\n        srcWidth: TileMap.TSize,\r\n        srcHeight: TileMap.TSize,\r\n        x: Math.round(\r\n          (col - tileMap.startCol) * TileMap.TSize + tileMap.offsetX\r\n        ),\r\n        y: Math.round(\r\n          (row - tileMap.startRow) * TileMap.TSize + tileMap.offsetY\r\n        ),\r\n        width: TileMap.TSize,\r\n        height: TileMap.TSize,\r\n        type: tile.type,\r\n        outOfBounds: tile.outOfBounds,\r\n      });\r\n    }\r\n    return <Tile>{};\r\n  }\r\n\r\n  static render(tileMap: TileMap, col: number, row: number) {\r\n    const tile = TileHelper.getTile(tileMap, col, row);\r\n    tileMap.context.drawImage(\r\n      tileMap.tileMapImage,\r\n      tile.srcX,\r\n      tile.srcY,\r\n      tile.srcWidth,\r\n      tile.srcHeight,\r\n      tile.x,\r\n      tile.y,\r\n      tile.width,\r\n      tile.height\r\n    );\r\n    if (DEBUG.enabled) TileHelper.debug(tileMap, tile);\r\n  }\r\n\r\n  static debug(tileMap: TileMap, tile: Tile) {\r\n    if (tile.type !== undefined) {\r\n      tileMap.context.beginPath();\r\n      tileMap.context.lineWidth = 1;\r\n      tileMap.context.strokeStyle = 'rgba(255, 0, 0, 0.2)';\r\n      tileMap.context.strokeRect(tile.x, tile.y, TileMap.TSize, TileMap.TSize);\r\n      tileMap.context.closePath();\r\n      tileMap.context.font = '12px sans-serif';\r\n      tileMap.context.fillStyle = 'purple';\r\n      tileMap.context.fillText(tile.type + '', tile.x, tile.y + 12);\r\n    }\r\n    if (tile.outOfBounds) {\r\n      tileMap.context.beginPath();\r\n      tileMap.context.fillStyle = 'rgba(255, 0, 0, 0.2)';\r\n      tileMap.context.fillRect(tile.x, tile.y, TileMap.TSize, TileMap.TSize);\r\n      tileMap.context.closePath();\r\n    }\r\n  }\r\n}\r\n","export type Point = { x: number; y: number };\r\n\r\n/**\r\n * Constucts a rectangle from top left x y coords\r\n */\r\nexport class Rectangle {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n\r\n  get center(): Point {\r\n    return {\r\n      x: this.x + Math.floor(this.width / 2),\r\n      y: this.y + Math.floor(this.height / 2),\r\n    };\r\n  }\r\n\r\n  get vertices(): [Point, Point, Point, Point] {\r\n    return [\r\n      { x: this.x, y: this.y },\r\n      { x: this.x + this.width, y: this.y },\r\n      { x: this.x + this.width, y: this.y + this.height },\r\n      { x: this.x, y: this.y + this.height },\r\n    ];\r\n  }\r\n\r\n  get a(): Point {\r\n    return this.vertices[0];\r\n  }\r\n\r\n  get b(): Point {\r\n    return this.vertices[1];\r\n  }\r\n\r\n  get c(): Point {\r\n    return this.vertices[2];\r\n  }\r\n\r\n  get d(): Point {\r\n    return this.vertices[3];\r\n  }\r\n\r\n  constructor(x: number, y: number, width: number, height: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n}\r\n\r\n/**\r\n * Construct a circle from point and radius\r\n */\r\nexport class Circle {\r\n  origin: Point;\r\n  radius: number;\r\n  circumference: number;\r\n  diameter: number;\r\n\r\n  get x(): number {\r\n    return this.origin.x;\r\n  }\r\n\r\n  get y(): number {\r\n    return this.origin.y;\r\n  }\r\n\r\n  constructor(origin: Point, radius: number) {\r\n    this.origin = origin;\r\n    this.radius = radius;\r\n    this.circumference = 2 * Math.PI * radius;\r\n    this.diameter = 2 * radius;\r\n  }\r\n}\r\n\r\n/**\r\n * Basic vector and vector operations\r\n */\r\nexport class Vector {\r\n  x: number;\r\n  y: number;\r\n\r\n  constructor(p1: Point, p2: Point) {\r\n    this.x = p2.x - p1.x;\r\n    this.y = p2.y - p1.y;\r\n  }\r\n\r\n  dot(v: Vector): number {\r\n    return this.x * v.x + this.y * v.y;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a random number less than max\r\n * @param max\r\n * @returns\r\n */\r\nexport const getRandomInt = (max: number): number => {\r\n  return Math.floor(Math.random() * max);\r\n};\r\n\r\n/**\r\n * Converts degrees to radians\r\n * @param degrees\r\n * @returns\r\n */\r\nexport const degToRad = (degrees: number): number => (Math.PI / 180) * degrees;\r\n\r\nexport type RgbArray = [number, number, number, number?];\r\n\r\nexport const rgbArrayToString = (rgb: RgbArray): string =>\r\n  `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, ${rgb[3] ? rgb[3] : 1})`;\r\n\r\nexport const rgbArrayOpacity = (rgb: RgbArray, opacity: number): RgbArray => {\r\n  const rgba: RgbArray = [...rgb];\r\n  rgba[3] = opacity;\r\n  return rgba;\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(752);\n"],"names":["GAME","Game","DEBUG","Debugger","run","x","y","width","height","tileMap","this","maxX","cols","TileMap","TSize","maxY","rows","update","dirX","dirY","speed","Math","max","min","Camera","domId","layers","Map","canvas","document","getElementById","setAttribute","Canvas","Width","Height","context","getContext","getCanvas","clear","clearRect","getLayers","Array","from","values","sort","a","b","layer","addLayer","has","id","console","warn","set","removeLayer","delete","render","tick","forEach","hide","enabled","debug","game","debugLayers","tileSelector","TileSelector","push","TilePlacer","background","tileMapExporter","TileMapExporter","checkboxEl","addEventListener","e","onChange","target","checked","show","exportTileMap","style","display","filename","jsonStr","JSON","stringify","tiles","element","createElement","encodeURIComponent","body","appendChild","click","removeChild","options","prevCol","prevRow","gameCanvas","gameTileMap","camera","debugTileMap","setCamera","onMouseDown","bind","onMouseMove","onMouseLeave","button","setTileOnMap","col","floor","row","setTile","rect","getBoundingClientRect","round","clientX","left","clientY","top","tile","getSelectedTile","tilemapImg","Image","ui","src","swatchEl","styles","type","cssText","append","selectedTile","clearSelectedStyle","tileType","parseInt","getAttribute","border","childNodes","nextId","start","BlobMonster","BlobId","srcX","srcY","imgSrc","stats","health","attackPower","attackSpeed","Monster","aabbCollision","cameraOffsetX","cameraOffsetY","xCollides","yCollides","c","pointInRectangle","point","ab","Vector","ap","bc","bp","dot","circleInRectangle","circle","testX","testY","distX","distY","sqrt","radius","debugColor","touchingTiles","outOfBoundsTiles","img","vector","center","move","prev","Rectangle","collides","collisionDetection","clampValues","startCol","endCol","ceil","startRow","endRow","r","TileHelper","getTile","outOfBounds","beginPath","strokeStyle","rgbArrayToString","lineWidth","strokeRect","closePath","length","index","font","fillStyle","fillText","rgbArrayOpacity","fillRect","GameObject","detectionRadius","characterDetected","doDamage","setDetectionCircle","args","gameObjects","player","get","Player","PlayerId","detectPlayer","gameObjectsCollisionDetection","renderMonster","renderShadow","object","attackPlayer","freq","detectionCircle","Circle","tickOffset","imgSrcXOffset","drawImage","ellipse","fill","arc","degToRad","stroke","moveTo","lineTo","isAttacking","attackImg","attackAnimationMap","window","attack","renderCharacter","keyboard","isDown","Key","Left","Right","Up","Down","updateCamera","log","includes","imgSrcYOffset","FarEdgeDistFactor","NearEdgeDistFactor","time","TickInterval","requestAnimationFrame","Keyboard","createBackground","playerUi","PlayerUi","i","p","blob","keys","listenForEvents","onKeyDown","onKeyUp","key","event","keyCode","code","preventDefault","undefined","Error","isAnyDown","healthImg","healthHalfImg","fullHearts","playerHealth","halfHeart","dx","offsetX","offsetY","tileMapImage","createEmptyTiles","TileType","Empty","splice","BackgroundId","srcWidth","srcHeight","Tile","vertices","origin","circumference","PI","diameter","p1","p2","v","getRandomInt","random","degrees","rgb","opacity","rgba","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","g","globalThis","Function","Symbol","toStringTag","Object","defineProperty","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace"],"sourceRoot":""}